// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Connect.proto

#ifndef PROTOBUF_Connect_2eproto__INCLUDED
#define PROTOBUF_Connect_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Connect_2eproto();
void protobuf_AssignDesc_Connect_2eproto();
void protobuf_ShutdownFile_Connect_2eproto();

class Connect;

// ===================================================================

class Connect : public ::google::protobuf::Message {
 public:
  Connect();
  virtual ~Connect();

  Connect(const Connect& from);

  inline Connect& operator=(const Connect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Connect& default_instance();

  void Swap(Connect* other);

  // implements Message ----------------------------------------------

  Connect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Connect& from);
  void MergeFrom(const Connect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nickname = 1;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required string passhash = 2;
  inline bool has_passhash() const;
  inline void clear_passhash();
  static const int kPasshashFieldNumber = 2;
  inline const ::std::string& passhash() const;
  inline void set_passhash(const ::std::string& value);
  inline void set_passhash(const char* value);
  inline void set_passhash(const char* value, size_t size);
  inline ::std::string* mutable_passhash();
  inline ::std::string* release_passhash();
  inline void set_allocated_passhash(::std::string* passhash);

  // @@protoc_insertion_point(class_scope:Connect)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_passhash();
  inline void clear_has_passhash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::std::string* passhash_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Connect_2eproto();
  friend void protobuf_AssignDesc_Connect_2eproto();
  friend void protobuf_ShutdownFile_Connect_2eproto();

  void InitAsDefaultInstance();
  static Connect* default_instance_;
};
// ===================================================================


// ===================================================================

// Connect

// required string nickname = 1;
inline bool Connect::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Connect::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Connect::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Connect::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& Connect::nickname() const {
  return *nickname_;
}
inline void Connect::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Connect::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Connect::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Connect::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* Connect::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Connect::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string passhash = 2;
inline bool Connect::has_passhash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Connect::set_has_passhash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Connect::clear_has_passhash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Connect::clear_passhash() {
  if (passhash_ != &::google::protobuf::internal::kEmptyString) {
    passhash_->clear();
  }
  clear_has_passhash();
}
inline const ::std::string& Connect::passhash() const {
  return *passhash_;
}
inline void Connect::set_passhash(const ::std::string& value) {
  set_has_passhash();
  if (passhash_ == &::google::protobuf::internal::kEmptyString) {
    passhash_ = new ::std::string;
  }
  passhash_->assign(value);
}
inline void Connect::set_passhash(const char* value) {
  set_has_passhash();
  if (passhash_ == &::google::protobuf::internal::kEmptyString) {
    passhash_ = new ::std::string;
  }
  passhash_->assign(value);
}
inline void Connect::set_passhash(const char* value, size_t size) {
  set_has_passhash();
  if (passhash_ == &::google::protobuf::internal::kEmptyString) {
    passhash_ = new ::std::string;
  }
  passhash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Connect::mutable_passhash() {
  set_has_passhash();
  if (passhash_ == &::google::protobuf::internal::kEmptyString) {
    passhash_ = new ::std::string;
  }
  return passhash_;
}
inline ::std::string* Connect::release_passhash() {
  clear_has_passhash();
  if (passhash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passhash_;
    passhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Connect::set_allocated_passhash(::std::string* passhash) {
  if (passhash_ != &::google::protobuf::internal::kEmptyString) {
    delete passhash_;
  }
  if (passhash) {
    set_has_passhash();
    passhash_ = passhash;
  } else {
    clear_has_passhash();
    passhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Connect_2eproto__INCLUDED
